@using SunriseSunsetApp.Services
@inject IHttpContextAccessor HttpContextAccessor
@inject PersistentComponentState ApplicationState
@inject ClientInfoService ClientInfo

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
	
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
	
	
    <link rel="stylesheet" href="SunriseSunset.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet @rendermode="@InteractiveServer" />
</head>

<body>
    <Routes @rendermode="@InteractiveServer" />
    <script src="_framework/blazor.web.js"></script>
	<script src="_content/MudBlazor/MudBlazor.min.js"></script>
</body>

</html>

@code {
    private PersistingComponentStateSubscription? subscription;
    private const string ClientIpKey = "ClientIp";

    protected override void OnInitialized()
    {
        if (ApplicationState.TryTakeFromJson<string>(ClientIpKey, out var ip))
        {
            ClientInfo.ClientIp = ip;
        }

        subscription = ApplicationState.RegisterOnPersisting(PersistClientIp);
    }

    private Task PersistClientIp()
    {
        var ipAddress = HttpContextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString();
        ClientInfo.ClientIp = ipAddress;
        ApplicationState.PersistAsJson(ClientIpKey, ipAddress);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }
}
